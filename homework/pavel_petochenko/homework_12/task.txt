1. Что такое тестирование ПО?
Тестирование ПО - процесс проверки и оценки функциональности, качества, надежности и безопасности ПО.
Суть ПО (как мне кажется) заключается в выявлении ошибок, недочетов, несоответствии требованиям и других проблем,
которые в конечном итоге могут повлиять на работу продукта. Тестирование может быть произведено как вручную, так и с
помощью автоматизации. К примеру есть функциональное тестирование, тестирование производительности, безопасности,
совместимости и другие виды.
Тестирование ПО - важный процесс разработки ПО, который помогает достичь высокого качества создаваемого продукта для
удовлетворения потребностей пользователя и заказчика.


2. Этапы SDLC, что значит каждый из них?
SDLC - жизненный цикл разработки ПО. Это этапы и процессы которые необходимы для успешной разработки и тестирования ПО.
Этапы могут отличаться в зависимости от методологи разработки, типа проекта и других факторов. Но по сути общая структура
остается неизменной.

	1. Requirement Analysis. Как понимаю, это планирование и анализ. Где планирование - это процесс определение целей и 
	требований проекта, плана разработки, оценка ресурсов. И предусмотрение рисков. Анализ - изучение требований проекта,
	разработка документации, создание функциональных и технических спецификаций.
	2. Design. Создание архитектуры и интерфейса, структуры БД, выбор инструментов и технологий для разработки.
	3. Implementation. Создание кода, скриптов, тестирование кода.
	4. Testing. Тестирование на соответствие требованиям. Выявление ошибок и их устранение. Тест производительности и 
	функциональности.
	5. Evaluation. Как понимаю на этом этапе производится оценка и анализ качества тестируемой части/продукта (?) перед её/его внедрением.


3. Какие этапы тестирования вы можете перечислить?
	1. Анализ требований (изучение спецификаций и функциональных требований).
	2. Планирование тестирования (выбирается способ тестирования ПО).
	3. Тест дизайн (процесс создания тестовых случаев(тест-кейсов)).
	4. Запуск тестов (запуск тест-кейсов).
	5. Редактирование тестов (изменение тест-кейсов).
	6. Регрессионное тестирование (тестирование после внесения изменений/исправлений в ПО для проверки того, что все остальные функции 
	не были повреждены/изменены в результате изменений/исправлений)
	7. Приемочные испытания (тестирование, которое производится заказчиком для проверки соответствия требованиям ПО и его работоспособности)
	8. Эксплуатация и сопровождение (эксплуатация конечным пользователем после релиза, а сопровождение - это обеспечение работоспособности ПО
	на протяжении его жизненного цикла)


4. Что такое регрессионное тестирование?
Как и писал ранее (п.3.6): проверка(тестирование) ПО на наличие ошибок после внесения в него исправлений/изменений. Это касается и тестов, которые были 
проведены ранее. Это позволяет увидеть нежелательные изменения в работе продукта.


5. Что такое смоук тест?
Это поверхностное тестирование функциональности продукта для выявления критических ошибок. Для примера: запуск программы, открытие главного меню и др.


6. Какие уровни тестирования вы знаете? Что тестируется на каждом из них?
Знаю про:
	1. Unit тестирование. Когда тестируется отдельный компонент программы.
	2. Интеграционное тестирование. Тестирование  взаимодействия отдельных модулей программы.
	3. Системное тестирование. Тестируется система целиком, где проверяется корректность работы всех компонентов программы.
	4. Приемочное тестирование (п.3.7). Проверка продукта перед его релизом, проверка перед внедрением и использованием ПО.
	

7. Расскажите об основных особенностях Agile методологии (кратко).
	1. Люди и их взаимодействие важнее, чем процесс и инструменты. Постоянная обратная связь.
	2. Рабочий софт важнее документации.
	3. Взаимодействие с клиентом (заказчиком).
	4. Реакция на изменения важнее первоначального плана.
	5. Интеграция тестирования внедряется с первого этапа разработки ПО и должно выполняться на каждой итерации(спринте), это позволяет оперативно 
	выявить дефекты и устранить их.
	6. Есть различные фреймворки, которые определяют структуру процесса разработки, роли участников, методы коммуникации и пр. К примеру: Scrum, 
	Kanban, XP (Extreme Programmnig) и другие.


8. Какими характеристиками должны обладать хорошие требования?
	1. Однозначность. Требования должны быть ясными и однозначными, без возможности лишних толкований.
	2. Полнота. Требования должны содержать все элементы, которые необходимы разработчикам для реализации задачи(функционала).
	3. Согласованность. Они должны быть согласованы между собой и не должны противоречить друг другу.
	4. Требования должны быть реалистичными, чтобы была возможность их реализовать в рамках заданных ограничений.
	5. Приоритетность. Для реализации самых важных функций в первую очередь.
	6. Ясность. Они должны быть ясны для всех сторон: заказчика, разработчика и тестировщика.
	7. Измеримость. Должны быть конкретные критерии оценки функционала.












































